@page "/register"
@inject HttpClient http
@inject NavigationManager NavManager

<div id="register">
    <h1 class="pt-5 pb-4 text-center">Register</h1>
    <EditForm Model="@Request" class="card card-body bg-white mt-5" OnValidSubmit="NavigateToMap">
        <div class="form-group mb-2">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" placeholder="Username" @bind-Value="Request.Username" />
            <ValidationMessage For="@(() => Request.Username)" />
        </div>
        <div class="form-group mb-2">
            <label for="password">Password</label>
            <InputText type="password" id="password" class="form-control" placeholder="Password" @bind-Value="Request.Password" />
            <ValidationMessage For="@(() => Request.Password)" />
        </div>
        <div class="form-group mb-2">
            <label for="email">Email</label>
            <InputText id="email" class="form-control" placeholder="Email" @bind-Value="Request.Email" />
            <ValidationMessage For="@(() => Request.Email)" />
        </div>
        <div class="d-flex justify-content-between mt-3">
            <button type="button" class="btn btn-outline-secondary" @onclick="NavigateToLogin">Login</button>
            <button type="submit" class="btn btn-success">Register</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public RegisterRequest? Request { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Request = new RegisterRequest();
    }

    private void NavigateToMap()
    {
        NavManager.NavigateTo("map");
    }

    private void NavigateToLogin()
    {
        NavManager.NavigateTo("login");
    }
}
