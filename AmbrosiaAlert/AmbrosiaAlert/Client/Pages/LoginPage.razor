@page "/login"
@inject HttpClient http
@inject NavigationManager NavManager

<div id="login">
    <h1 class="pt-5 pb-4 text-center">Login</h1>
    <EditForm Model="@Request" class="card card-body bg-white mt-5">
        <DataAnnotationsValidator />

        <div class="form-group row mb-2">
            <label for="username" class="col-md-2 col-form-label">Username</label>
            <div class="col-md-10">
                <InputText id="username" class="form-control" placeholder="Username" @bind-Value="Request.Username" />
                <ValidationMessage For="@(() => Request.Username)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="password" class="col-md-2 col-form-label">Password</label>
            <div class="col-md-10">
                <InputText type="password" id="password" class="form-control" placeholder="Password" @bind-Value="Request.Password" />
                <ValidationMessage For="@(() => Request.Password)" />
            </div>
        </div>
        <div class="d-flex justify-content-between mt-3">
            <button type="button" class="btn btn-outline-secondary" @onclick="NavigateToRegister">Register</button>
            <button type="submit" class="btn btn-success" @onclick="NavigateToMap">Login</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public AuthenticateRequest? Request { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Request = new AuthenticateRequest();
    }

    private void NavigateToMap()
    {
        NavManager.NavigateTo("map");
    }

    private void NavigateToRegister()
    {
        NavManager.NavigateTo("register");
    }
}
